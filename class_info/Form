====ClassInfo====
name: Form
written in: Form.java
scope: public
public attributes:
private attributes:
	`String form`
	`int pos`
	`ArrayList<String> splittedForm`
	`ArrayList<Double> entity`
	`double entitynum`
public methods:
	method name: init
	method return type: void
	method arguments:
		`String form`
	method local var: []
	method using attributes: ['pos', 'splittedForm', 'entity', 'entitynum']
	method sentence: 
		('public void init(String form)', 17)
		('this.form = form', 18)
		('pos = 0', 19)
		('splittedForm.clear()', 20)
		('entity.clear()', 21)
		('entitynum = 0.0', 22)
	method name: split
	method return type: void
	method arguments:
	method local var: ['bag', 'operator']
	method using attributes: ['pos', 'form', 'splittedForm', 'entity']
	method sentence: 
		('public void split()', 25)
		('String bag = ""', 26)
		('String operator = "\\\\+|-|\\\\*|/|\\\\(|\\\\)|%|sin|cos|tan|abs|log|sqrt|cbrt|pow|exp|asin|acos|atan|deg|rad|PI|E|\\\\{|\\\\}"', 27)
		('while (pos < form.length())', 28)
		('space()', 29)
		('bag = pack(bag)', 30)
		('if (bag.matches("^[0-9]+$"))', 31)
		('for (;;)', 32)
		('if (pos == form.length())', 33)
		('splittedForm.add("number")', 34)
		('entity.add(Double.valueOf(bag))', 35)
		('break', 36)
		('bag = pack(bag)', 38)
		('if (!bag.matches("^[0-9]+[.]?[0-9]*$"))', 39)
		('bag = bag.substring(0, bag.length() - 1)', 40)
		('pos--', 41)
		('splittedForm.add("number")', 42)
		('entity.add(Double.valueOf(bag))', 43)
		('bag = ""', 44)
		('break', 45)
		('if (bag.matches(operator))', 49)
		('splittedForm.add(bag)', 50)
		('entity.add(Double.valueOf(0))', 51)
		('bag = ""', 52)
		('splittedForm.add("end")', 55)
		('entity.add(Double.valueOf(0))', 56)
		('splittedForm.add("end")', 57)
		('entity.add(Double.valueOf(0))', 58)
		('splittedForm.add("end")', 59)
		('entity.add(Double.valueOf(0))', 60)
		('splittedForm.add("end")', 61)
		('entity.add(Double.valueOf(0))', 62)
		('splittedForm.add("end")', 63)
		('entity.add(Double.valueOf(0))', 64)
		('splittedForm.add("end")', 65)
		('entity.add(Double.valueOf(0))', 66)
	method name: calc
	method return type: String
	method arguments:
	method local var: []
	method using attributes: ['pos']
	method sentence: 
		('public String calc()', 85)
		('pos = 0', 86)
		('return String.valueOf(expr())', 87)
	method name: splitOut
	method return type: void
	method arguments:
	method local var: ['i', 'i']
	method using attributes: ['splittedForm', 'entity']
	method sentence: 
		('public void splitOut()', 263)
		('for (int i = 0; i < splittedForm.size(); i++)', 264)
		('System.out.print(splittedForm.get(i) + ",")', 265)
		('System.out.println()', 267)
		('for (int i = 0; i < splittedForm.size(); i++)', 268)
		('System.out.print(entity.get(i) + ",")', 269)
		('System.out.println()', 271)
private methods:
	method name: (
	method arguments:
	method local var: []
	method using attributes: ['pos']
	method sentence: 
		('Form()', 13)
		('pos = 0', 14)
	method name: space
	method arguments:
	method local var: []
	method using attributes: ['form', 'pos']
	method sentence: 
		('private void space()', 69)
		("while (form.charAt(pos) == ' ')", 70)
		('if (pos == form.length() - 1)', 71)
		('break', 72)
		('else', 73)
		('pos++', 74)
	method name: pack
	method arguments:
		`String bag`
	method local var: []
	method using attributes: ['form', 'pos']
	method sentence: 
		('private String pack(String bag)', 79)
		('bag += String.valueOf(form.charAt(pos))', 80)
		('pos++', 81)
		('return bag', 82)
	method name: expr
	method arguments:
	method local var: ['x']
	method using attributes: ['pos']
	method sentence: 
		('private double expr()', 90)
		('System.out.println("expr")', 91)
		('double x = term()', 92)
		('for (;;)', 93)
		('switch (peek())', 94)
		('case "+":System.out.println("" + (pos - 1) + " -> " + pos)', 96)
		('x += term()', 97)
		('continue', 98)
		('case "-":System.out.println("" + (pos - 1) + " -> " + pos)', 100)
		('x -= term()', 101)
		('continue', 102)
		('default:System.out.println("" + (pos - 1) + " -> " + pos)', 104)
		('pos--', 106)
		('break', 107)
		('System.out.println("expr : " + x)', 109)
		('return x', 110)
	method name: term
	method arguments:
	method local var: ['x', 'base', 'pownum']
	method using attributes: ['pos']
	method sentence: 
		('private double term()', 113)
		('System.out.println(" term")', 114)
		('Double x', 115)
		('switch (peek())', 116)
		('case "-":System.out.println(" " + (pos - 1) + " -> " + pos)', 118)
		('x = -number()', 119)
		('break', 120)
		('case "+":System.out.println(" " + (pos - 1) + " -> " + pos)', 122)
		('x = number()', 123)
		('break', 124)
		('case "sin":System.out.println(" " + (pos - 1) + " -> " + pos)', 126)
		('x = Math.sin(number())', 127)
		('break', 128)
		('case "cos":System.out.println(" " + (pos - 1) + " -> " + pos)', 130)
		('x = Math.cos(number())', 131)
		('break', 132)
		('case "tan":System.out.println(" " + (pos - 1) + " -> " + pos)', 134)
		('x = Math.tan(number())', 135)
		('break', 136)
		('case "asin":System.out.println(" " + (pos - 1) + " -> " + pos)', 138)
		('x = Math.asin(number())', 139)
		('break', 140)
		('case "acos":System.out.println(" " + (pos - 1) + " -> " + pos)', 142)
		('x = Math.acos(number())', 143)
		('break', 144)
		('case "atan":System.out.println(" " + (pos - 1) + " -> " + pos)', 146)
		('x = Math.atan(number())', 147)
		('break', 148)
		('case "abs":System.out.println(" " + (pos - 1) + " -> " + pos)', 150)
		('x = Math.abs(number())', 151)
		('break', 152)
		('case "deg":System.out.println(" " + (pos - 1) + " -> " + pos)', 154)
		('x = Math.toDegrees(number())', 155)
		('break', 156)
		('case "rad":System.out.println(" " + (pos - 1) + " -> " + pos)', 158)
		('x = Math.toRadians(number())', 159)
		('break', 160)
		('case "log":System.out.println(" " + (pos - 1) + " -> " + pos)', 162)
		('if (peek().equals("{"))', 163)
		('Double base = expr()', 164)
		('peek()', 165)
		('x = Math.log(number()) / Math.log(base)', 166)
		('else', 167)
		('pos--', 168)
		('x = Math.log(number())', 169)
		('break', 171)
		('case "sqrt":System.out.println(" " + (pos - 1) + " -> " + pos)', 173)
		('x = Math.sqrt(number())', 174)
		('break', 175)
		('case "cbrt":System.out.println(" " + (pos - 1) + " -> " + pos)', 177)
		('x = Math.cbrt(number())', 178)
		('break', 179)
		('case "exp":System.out.println(" " + (pos - 1) + " -> " + pos)', 181)
		('x = Math.exp(number())', 182)
		('break', 183)
		('case "pow":System.out.println(" " + (pos - 1) + " -> " + pos)', 185)
		('if (peek().equals("{"))', 186)
		('Double pownum = expr()', 187)
		('peek()', 188)
		('x = Math.pow(number(), pownum)', 189)
		('else', 190)
		('pos--', 191)
		('x = Math.pow(number(), 2)', 192)
		('break', 194)
		('default:System.out.println(" " + (pos - 1) + " -> " + pos)', 196)
		('pos--', 197)
		('System.out.println(" " + (pos + 1) + " -> " + pos)', 198)
		('x = number()', 199)
		('break', 200)
		('switch (peek())', 202)
		('case "*":System.out.println(" " + (pos - 1) + " -> " + pos)', 204)
		('x *= term()', 205)
		('break', 206)
		('case "/":System.out.println(" " + (pos - 1) + " -> " + pos)', 208)
		('x /= term()', 209)
		('break', 210)
		('case "%":System.out.println(" " + (pos - 1) + " -> " + pos)', 212)
		('x %= term()', 213)
		('break', 214)
		('default:System.out.println(" " + (pos - 1) + " -> " + pos)', 216)
		('pos--', 217)
		('System.out.println(" " + (pos + 1) + " -> " + pos)', 218)
		('break', 219)
		('System.out.println(" term : " + x)', 221)
		('return x', 222)
	method name: number
	method arguments:
	method local var: ['x']
	method using attributes: ['pos', 'entitynum']
	method sentence: 
		('private double number()', 225)
		('System.out.println("  number")', 226)
		('Double x', 227)
		('switch (peek())', 228)
		('case "(":System.out.println("  " + (pos - 1) + " -> " + pos)', 230)
		('x = expr()', 231)
		('peek()', 232)
		('break', 233)
		('case "number":System.out.println("  " + (pos - 1) + " -> " + pos)', 235)
		('x = entitynum', 236)
		('break', 237)
		('case "PI":System.out.println("  " + (pos - 1) + " -> " + pos)', 239)
		('x = Math.PI', 240)
		('break', 241)
		('case "E":System.out.println("  " + (pos - 1) + " -> " + pos)', 243)
		('x = Math.E', 244)
		('break', 245)
		('default:System.out.println("  " + (pos - 1) + " -> " + pos)', 247)
		('x = 0.0', 248)
		('System.out.println("  number : " + x)', 250)
		('return x', 251)
	method name: peek
	method arguments:
	method local var: ['ret']
	method using attributes: ['splittedForm', 'pos', 'entitynum', 'entity']
	method sentence: 
		('private String peek()', 254)
		('String ret = splittedForm.get(pos)', 255)
		('if (ret.equals("number"))', 256)
		('entitynum = entity.get(pos).doubleValue()', 257)
		('pos++', 259)
		('return ret', 260)
====END====
